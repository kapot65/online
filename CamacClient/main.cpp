/*! \mainpage Программный комплекс Online
 * \section introduction Введение
 * Программный комплекс Online предназначен для набора данных на установке Троицк ню масс. Комплекс написан на Qt 5.4 (4.8 для CCPC7_Server)
 * с использованием сторонних библиотек [QJson](http://qjson.sourceforge.net/), [QCustomPlot](http://www.qcustomplot.com/)
 * и [easylogging++](https://github.com/easylogging/easyloggingpp). Комплекс состоит из 4 программ:
 *
 * - **CCPC7_Server** - программа для взаимодействия с CCPC. Устанавливается на CCPC. Программа осуществляет возможность управления CCPC
 * через сеть и реализует функции, необходимые для сбора, такие как:
 *  - Инициализация CCPC.
 *  - Сбор точки.
 *  - Остановка сбора точки.
 *  - Выполнение команды NAF (в работе не используется, необходимо для тестирования).
 *  - Внутреннее управление CCPC происходит через API, поставляемое с машиной.
 *
 * - **HV_Server** - программа для управления высоким напряжением. Ставится на CCPC, контролирующий высокое напряжение. Так же как и
 * CCPC7_Server программа осуществляет возможность управления высоким напряжением через сеть. Программа позволяет:
 *  - Устанавливать напряжение на блоке.
 *  - Считывать напряжение с блока.
 *  - Внутреннее управление высоким напряжением осуществляется через общение с блоком через Com порты.
 *
 * - **CamacClient** - Основная программа, через нее проводится управление сбором. Программа подключается к CCPC7_Server и HV_Server
 * и с помощью них проводит управление набором. CamacClient общается с CCPC7_Server и HV_Server по средствам TCP в формате
 * http://elog.mass.inr.ru/online/1. Программа позволяет:
 *  - Установить сценарий сбора.
 *  - Провести одно или несколько повторений сбора по сценарию со сменой или без смены направления прохода.
 *  - Провести предварительную визуализацию собираемых данных.
 *  - Выводить текущую информацию о сборе.
 *  - Контролировать процесс сбора (ставить на паузу, останавливать сбор. Делать текущее повторение последним).
 *
 * - **DataVisualizer** - Необязательная программа. Позволяет визуализировать уже набранные данные сценарии.
 *
 *
 * \image html complex.png "Взаимодействие между элементами в программном комплексе Online"
 *
 * \section install Установка
 * \subsection CCPC7Install Установка ССPC7_Server
 * Программа предназначена для установки на Ubuntu 12. Т.к. CCPC API работает напрямую с ячейками
 * памяти, выполнение программы требует root прав. Также программа использует стороннюю библиотеку
 * QJson, которая должна быть установлена. Для установки, нужно выполнить команду:
 *
 *      sudo apt-get install libqjson0
 *
 * Также, если на машине не установлен Qt, нужно установить необходимые для работы библиотеки Qt.
 *
 *       sudo apt-get install libqt4-core libqt4-gui libqt4-network
 *
 * \warning При установке не нужно добавлять новые репозитории. Новые версии Qt Creator, лежащие в них
 * не работают на CCPC7.
 *
 * Далее, копируем данные программы в любую удобную папку. После этих операций на CCPC7 будет установлена
 * работающая версия программы CCPC7_Server. Однако, при включении она будет запрашивать пароль суперпользователя.
 * Для запуска при автозагрузке необходимо снять проверку прав
 * с программы при ее запуске. Для этого в В
 *
 *     /etc/sudoers/
 *
 * (с помощью команды sudo visudo) нужно добавить строки:
 *
 *     user ALL=(ALL) NOPASSWD: path_to_ccpc7_server
 *
 * где
 *     path_to_ccpc7_server
 * - путь до программы CCPC7_Server.
 *
 * Скрипт для запуска из автозагрузки:
 *
 *     #!/bin/sh -e
 *     cd "path_to_ccpc7_server_folder"
 *     xterm -e  "sudo -n ‘path_to_CCPC7_Server”
 *
 * где
 *
 *     path_to_ccpc7_server_folder
 *
 * путь до папки с программой CCPC7_Server,
 *
 *     path_to_ccpc7
 *
 * путь до программы CCPC7_Server.
 *
 * Скрипт добаляется в автозагрузку с помощью Settings manager
 * (Applications menu -> Settings -> Settings Manager -> Session and Startup).
 * Также существуют другие методы добавления скрипта в автозагрузку, однако из - за
 * [бага](https://bugs.launchpad.net/ubuntu/+source/sysvinit/+bug/882254), существующего
 * на ubuntu 12, данный способ является наиболее простым в установке.
 * Для удобства, можно установить на CCPC удаленный рабочий стол x11VNC с помощью команды
 *
 *     sudo apt-get install x11vnc.
 *
 * Скрипт для автозагрузки:
 *
 *     #!/bin/sh -e
 *     while true
 *     do
 *     xterm -e x11vnc -forever
 *     done
 *
 * Скрипт представляет из себя бесконечный цикл, открывающий консоль с командой x11vnc,
 * которая поднимает сервер. Параметр -forever предотвращает закрытие порта при потере соединения.
 * Таким образом с помощью скрипта обеспеспечивается защита от случаного отсоединения
 * или закрытия консоли с портом. Недостатком того подхода является сложность отключения порта.
 * Если было создано лишнее подключение, его придется отключать через task manager.
 *
 * \subsubsection CCPC7InstallConfigure Настройка CCPC7_Server.
 * После установки сервера необходимо задать настройки.
 * Для этого в файле CamacServerSettings.ini надо задать необходимые параметры.
 * Необходимые параметры для CCPC7_Server:
 * - Группа CamacServer
 *  - port - порт, который будет прослушивать сервер.
 * - Группа CamacAlgoritm
 *  - ADC_CRATE - адрес ADC_CRATE
 *  - MADC - адрес ADC_CRATE MADC
 *  - TG1 - адрес TG1
 *  - OV1 - адрес OV1
 *  - TTL_NIM - адрес TTL_NIM
 *  - COUNTER1 - адрес COUNTER1
 *  - COUNTER2 - адрес COUNTER2
 *  - TERMINAL1 - адрес TERMINAL1
 *  - TERMINAL2 - адрес TERMINAL2
 *
 * \note Готовый конфигурационный файл лежит в репозитории по пути Tests/CamacServerSettings.ini.
 *
 * \image html CCPC7Correct.png "Успешный запуск CCPC_Server"
 *
 * \note Если при запуске возникли проблемы, то они будут описаны в консоле сервера и сохранятся в лог файл.
 *
 * \image html CCPC7Incorrect.png "Запуск CCPC_Server с ошибками"
 *
 *
 * \subsection HVInstall Установка HV_Server
 * Установка HV_Server аналогична установке \ref CCPC7Install "CCPC7_Server".
 *
 *
 * В конфигурационном файле необходимо правильно задать следующие поля:
 *
 * - Группа Divider1
 *  - COM - Имя Com порта вольтметра, подключенного к делителю основного блока напряжения.
 *  - NormingCoefficient - Коэффициент делителя для основного блока напряжения.
 * - Группа Divider2
 *  - COM - Имя Com порта вольтметра, подключенного к делителю блока смещения.
 *  - NormingCoefficient - Коэффициент делителя для блока смещения.
 * - Группа HVController1
 *  - COM - Имя Com порта контроллера основного блока напряжения.
 *  - c0 - Коэффициент преобразования при свободном члене для основного блока.
 *  - c1 - Коэффициент преобразования при линейном члене для основного блока.
 *  - a0 - Коэффициент преобразования при свободном члене для управления напряжением через ccpc.
 *  - a1 - Коэффициент преобразования при линейном члене для управления напряжением через ccpc.
 *  - ControlerCCPCId - Номер модуля в Camac, осуществляющего контроль напряжения.
 *  - minTreshold - Минимальное возможное значение (непреобразованное) для основного блока.
 *  - maxTreshold - Максимальное возможное значение (непреобразованное) для основного блока.
 * - Группа HVController2
 *  - COM - Имя Com порта контроллера блока смещения.
 *  - c0 - Коэффициент преобразования при свободном члене для блока смещения.
 *  - c1 - Коэффициент преобразования при линейном члене для блока смещения.
 *  - minTreshold - Минимальное возможное значение (непреобразованное) для блока смещения.
 *  - maxTreshold - Максимальное возможное значение (непреобразованное) для блока смещения.
 *
 * \note Готовый конфигурационный файл лежит в репозитории по пути Tests/HVServerSettings.ini.
 *
 * Также, для записи логов нужно создать папку c адресом /home/Logs/HV_Server/.
 *
 * \image html HVCorrect.png "Успешный запуск HV_Server"
 *
 * \note Если при запуске возникли проблемы, то они будут описаны в консоле сервера и сохранятся в лог файл.
 *
 * \image html HVIncorrect.png "Запуск CCPC_Server с ошибками: не указаны необходимые параметры."
 *
 * \image html HVIncorrect2.png "Запуск CCPC_Server с ошибками: не удалось подключиться к устройству."
 *
 * \subsection ClientInstall Установка CamacClient
 *  - Windows
 *   Для установки программы CamacClient, достаточно скопировать папку с программой на компьютер и установить в файле CamacClientSettings.ini
 *   установить необходимые параметры.
 *
 *  - Linux
 *   - Установить зависимости
 *
 *           sudo apt-get install libqjson0
 *           sudo apt-get install libqt4-core libqt4-gui libqt4-network
 *
 *   - Скопировать Файлы программы в любую папку
 *
 * Необходимые поля для работы CamacClient:
 *
 * - Группа CCPC7Handler
 *  - ip - ip адрес сервера CCPC7_Server.
 *  - port - порт сервера CCPC7_Server.
 * - Группа HV_handler
 *  - ip - ip адрес сервера HV_Server.
 *  - port - порт сервера HV_Server.
 * - Группа Online
 *  - output_folder - директория, в которую будут записываться набранные данные.
 *
 * Также, для записи логов нужно создать папку c адресом D:/Logs для windows и /home/Logs/CamacClient/ для Linux.
 *
 * \section userManual Руководство пользователя
 * \subsection prepairing Подготовка комплекса к работе
 * \subsubsection CCPCModulesInit Запуск модулей CCPC
 * #### CCPC7_Server
 * Модуль CCPC7_Server инициализаруется автоматически при включении КАМАК.
 * Также сервер можно запустить вручную через иконку на рабочем столе.
 *
 * \image html ccpcDesktop.png "Иконка запуска CCPC7_Server"
 *
 * #### HV_Server
 * Модуль HV_Server также запускается автоматически при запуске.
 * \warning Перед запуском стойки HV, необходимо убедится в том, что все управляющие блоки выключены.
 * <b>Переключать блоки в автоматический режим можно только после полной инициализации операционной системы CCPC!!!</b>
 *
 * \note На данный момент после запуска необходимо вручную перезапускать программу HV_Server, т.к. она не успевает
 * получить ip адресс при автостарте. Для этого нужно просто закрыть ее, перезапуск произойдет автоматически.
 *
 * \image html hvDesktop.png "Иконка запуска HV_Server"
 *
 * \subsubsection vDesktopPrepare Запуск CamacClient
 *
 * Машина, на которой установлен CamacClient работает под ОС Kubuntu 15.10.
 * Для пользователей предумотрена учетная запись с именем online.
 * При запуске компьютера, система автоматически зайдет под нужным пользователем, однако в
 * других случаях придется вводить пароль.
 *
 *       login: online
 *       pass: online123
 *
 * На рисунке ниже показан рабочий стол компьютера, на котором работает CamacClient.
 *
 * \image html clientDesktop.png "Рабочий стол компьютера CamacClient"
 *
 * Здесь:
 *
 * 1. Ярлык папки, в которую записываются данные.
 * 2. Ярлык папки, содержащей сценарии.
 * 3. Скрипт для запуска CamacClient.
 * 4. Скрипт для подулючения к удаленному рабочему столу CCPC7_Server.
 * 5. Скрипт для запуска DataVisualizer.
 * 6. Скрипт для подулючения к удаленному рабочему столу HV_Server.
 *
 * Для запуска CamacClient, нужно два раза кликнуть на ярлык 3.
 *
 * \subsection Client Управление набором с помощью CamacClient
 * На рисунке ниже показан интерфейс программы CamacClient:
 * \image html camacInterface.png "Интерфейс CamacClient."
 * Интерфейс состоит из интерфейса управления (левая часть) и интерфейса вывода (правая часть).
 * \note Размеры интерфейстов могут быть изменены вплоть до полного их свертывания.
 *
 * Интерфейс управления имеет 3 вкладки:
 * 1. Общее. Эта вкладка отвечает за набор данных по сценарию.
 * 2. CCPC7. Позволяет выполнять отдельно функции CCPC.
 * 3. High voltage. Позволяет выполнять отдельно функции высоковольтной стойки.
 *
 * Вкладки CCPC7 и High voltage доступны только в режиме *advanced_mode*.
 * Для того, чтобы включить его нужно поменять в файле настроек CamacClientSettings.ini
 * поле *advanced_mode* с *false* на *true*.
 *
 * Для начала сбора необходимо переключиться на вкладку "Общее", задать необходимые параметры
 * (помечены звездочкой) и выбрать файл сценация.
 * \note Поля, помеченные звездочкой, содержат дополнительную информацию, которая будет показана при наведении на них курсора мыши.
 *
 * После корректного задания всех необходимых параметров станут доступны:
 * - Кнопка "старт". Для начала набора нужно нажать эту кнопку.
 * - Управление количеством повторений: спинбокс количества повторений и флаг смены направления обхода
 * сценария.
 * \note Количество повторений 0 соответствует неограниченному набору.
 *
 * \note При первом наборе после включения комплекса, может быть задержка перед выполнением сценария,
 * связанная с инициализацией сервера. Задержка занимает не более 20 секунд.
 *
 * После начала выполнения сценария на форме появятся 3 элемента управления:
 * - Кнопка "Пауза". При нажатии на эту кнопку будет завершен текущий шаг сценария, и процесс встанет
 * на паузу. Повторное нажатие этой кнопки снимает паузу. Также в метаданные сохранится информация о
 * паузе.
 *
 * - Кнопка "Стоп". При нажатии этой кнопки произойдет завершение текущей итерации без ожидания завершения
 * текущего шага. Если эта кнопка нажата в процессе набора точки, то он будет остановлен и точка будет набрана
 * частично.
 * \warning Данная кнопка завершает только текущую итерацию. Для полного завершения набора необходимо также поставить
 * галочку в чекбокc "Сделать эту итерацию последней".
 *
 * - Чекбокс "Сделать эту итерацию последней". Если этот флаг отмечен, алгоритм закончит текущее повторение
 * сценария и остановит набор.
 *
 * В процессе набора можно добавлять комментарии с привязкой ко времени в метаданные. Для этого нужно написать комментарий
 * в строку, находящуюся около кнопки "Отправить комментарий" и нажать на кнопку "Отправить комментарий".
 *
 * Также можно в реальном времени просматривать набранные файлы. Для этого используется \ref DataVisualizerInfo.
 *
 * В конце набора вкладка "Общее" приобретет вид, который у нее бул до старта, а файлы запишутся в выходную папку.
 * Подробнее о структуре хранения данных можно прочитать в http://elog.mass.inr.ru/online/1 п.2.
 *
 * \subsection DataVisualizerInfo Средство визуализации набранных данных
 * Средство основано на классе DataVisualizerForm и существует в двух видах:
 * - Отдельная программа для визуализации DataVisualizer.
 * - Встроенный в CamacClient виджет.
 *
 * На изображении ниже представален интерфейс средства.
 * \image html DataVisualizerInterface.png "Интерфейс средства визуализации набранных данных."
 *
 * Средство имеет разделено на 3 виджета:
 * - Виджет навигации по файлам. Через этот виджет открываются и закрываются файлы для просмотра. Для загрузки файла
 * и просотра метаданных нужно кликнуть по нему левой кнопкой мыши один раз, для просмотра графика, нужно уликунть дважды.
 * В этом виджете действуют следующие обозначения:
 *  - Файл загружен. Слева от названия файла появляется цветной квадратик, обозначающий его цвет его графика.
 *  - Файл отображен в окне графика. Фон названия файла окрашен в серый цвет. Если файл не отображет, то фон будет белым.
 *  - Файл выделен. Название файла помещено в черный прямоугольник.
 * - Таблица метаданных. В ней отображаются метаданные выделенного файла.
 * - Виджет графиков. В этом виджете графически отображаются данные. Имеет три вида отображения.
 *  - Абсолютное время.
 *  - Отностиельное время.
 *  - Гистограмма.
 *
 * \note Не все файлы могут быть открыты во всех видах отображения.
 *
 * \note Размеры виджетов могут быть изменены вплоть до полного их свертывания.
 *
 * Также виджет поддерживает управление мышью:
 * - Масштабирование с помощью колесика мыши.
 * - Масштабирование в интересующую область. Для этого необходимо выделить область при зажатой правой кнопке мыши.
 * - Автомасштабирование - одно нажатие правой кнопки мыши.
 *
 *
 * \subsection Scenario Подготовка сценария
 *
 * Сценарий представляет из себя текстовый файл с набором комманд и их аргументами. Команды и аргументы разделяются любыми разделительными знаками (пробел, табуляция, перенос строки и их комбинации). Ниже приведен пример файла сценария:
 *
 *      POINT 10 1000 0
 *
 *      SET_VOLTAGE 1 20
 *      WAIT 4000
 *      ACQUIRE_POINT 10
 *
 *      SET_VOLTAGE 1 80
 *      WAIT 4000
 *      ACQUIRE_POINT 10
 *
 *      SET_VOLTAGE 1 100
 *      WAIT 4000
 *      ACQUIRE_POINT 5
 *
 *      BREAK
 *
 * На данный момент сценарий поддерживает 5 типов команд:
 * - **SET_VOLTAGE** - выставляет напряжение. После этой команды должно идти 2 числа:
 *  блок, на котором должно быть выставлено напряжение (1 или 2) и напряжение в вольтах.
 * - **WAIT** - ожидание. После команды должно идти одно число - время ожидания в миллисекундах.
 * - **ACQUIRE_POINT** - сбор точки. После этой команды должно идти число - время сбора
 * в секундах (5, 10, 15, 20, 50, 100, 200. Можно ставить и произвольное число, но оно будет
 * преобразовано к ближайшему из доступных).
 * - **BREAK** - Остановка сценария. Команда не имеет параметров.
 * - **POINT** - Набор точки с заданным напряжением. После команды через пробел должны идти 3 аргумента: время набора точки в секундах,
 * Напряжение на основном блоке в вольтах и напряжение в вольтах на блоке смещения соответственно.
 *
 *
 * Программа CamacClient позволяет вести итеративный набор со сменой направления, однако эта возможность
 * доступна только для сценариев с четко определенной структурой: сценарий должен состоять
 * исключительно из блоков SET_VOLTAGE -> WAIT -> ACQUIRE_POINT. Приведенный выше пример
 * подходит под эту структуру.
 *
 *
 * \section srcPrepare Подготовка проекта к сборке
 *
 * \subsection DEFINES Определения
 * Проект имеет несколько зарезервированных определений, для изменения функциональности.
 *
 * Ниже приведен список зарезервированных определений.
 * - **TEST_MODE** - Сборка программы в тестовом режиме. В таком режиме, программа будет выдавать больше отладочной информации.
 * В CamacClient будут отображаться метаданные входящих сообщений. В консолях серверов будет больше информации о текущем
 * состоянии сервера. Также в лог будет выведено оповещение о работе программы в тестовом режиме.
 *
 * - **VIRTUAL_MODE** - Сборка в виртуальном режиме. Нужна для тестирования программы без железа. В этом режиме сервера, вместо
 * подключения к портам, будут имитировать их. В лог будет выведено оповещение о работе программы в виртуальном режиме.
 * \warning В CamacClient не дописана реакция на это определение.
 *
 * - **USE_QTJSON** - Использовать встроенный парсер Json вместо QJson. Облегчает сборку проекта, т.к. убирает зависимость от
 * библиотеки QJson.
 * \note Работает только в версии Qt выше 5.
 *
 * Определения устанавливаются в .pro файле соотвестсвующего проекта.
 * Пример установки определения.
 *
 *      DEFINES += TEST_MODE
 *
 * \subsection ThirdParty Сторонние библиотеки
 * - **QJSON** Для сборки c QJson (т. е. если не используется определение USE_QTJSON). Необходимо разместить
 * библиотеку по пути:
 *  - для Windows: D:/SDK/qjson. Путь к подключаемому файлу должен быть: D:/SDK/qjson/lib/libqjson.dll.a.
 *  - для Ubuntu: Стандартный путь.
 *
 * или поменять в pro - файлах пути к библиотекам.
 *
 * - **Git** Для отображения версии ревизии в передаваемых пакетах, необходимо установить на компьютер
 * [Git](https://git-scm.com/). Эта зависимость необязательна, проект соберется и без нее, однако в
 * данных будет отсутствовать информация о ревизии.
 *
 * \todo Поменять название CamacClient.  <br>
 * Поменять название CamacServer.  <br>
 * Добавить описание алгоритма сбора точки.  <br>
 * Online разобраться с потоками хендлеров.  <br>
 * CamacServer добавить возможность сборки без QJson (метаданные в QVaraiantMap).  <br>
 * Обновить инструкцию по установке программ под Linux.
 *
 * \subsection CCPCBuild Сборка CCPC программ из исходников
 * В этой главе описан процесс сборки программы из исходников на CCPC с чистой ос xubuntu 12.04.
 *
 * Шаги при сбоке:
 *
 * - Устанваливаем Qt
 *
 *       sudo apt-get install qt4-dev-tools libqt4-dev libqt4-core libqt4-gui
 *
 * - Устанваливаем Qt Creator
 *
 *        sudo apt-get install qtcreator
 *
 * \warning При установке не нужно добавлять новые репозитории. Новые версии Qt Creator, лежащие в них
 * не работают на CCPC.
 *
 * - Устанавливаем QJson
 *
 *       sudo apt-get install libqjson-dbg libqjson-dev libqjson0 libqjson0-dbg
 *
 * - Устанавливаем Git
 *
 *       sudo add-apt-repository ppa:git-core/ppa
 *       sudo apt-get update
 *       sudo apt-get install git-core
 *
 * - Собираем библиотеку QtSerialPort. Для этого:
 *  -Клонируем репозиторий в любую папку
 *
 *       sudo git clone -b qt4-dev git://code.qt.io/qt/qtserialport.git
 *
 *  -Открываем проект, через QtCreator. Добавлем дополнительный этак сборки Make с аргументом install.
 *  -Собираем проект.
 *
 * - Клонируем репозиторий в нужную папку
 *
 *       sudo mkdir -p  /home/QtProjects/Online
 *       sudo chmod -R 777 /home/QtProjects/Online
 *       cd  /home/QtProjects/Online
 *       git clone https://Kapot@bitbucket.org/Kapot/online.git
 *
 * - После установки всех нужных компонентов открываем QtCreator с правами root
 *
 *       sudo /usr/bin/qtcreator
 *
 *  И открываем файл online.pro.
 *
 * - Выбираем нужную программу и нажимаем qmake
 *
 * \section commandsList Список команд и ответов
 * Ниже приведен список запросов и аврианты ответов для серверов CCPC7_Server
 * и HV_Server.
 * #### Общее для всех сообщений
 * Полный формат сообщений соответсвует [dataforge-envelope](http://elog.mass.inr.ru/online/1).
 * Во всех метаданных должно присутствовать поле <b>"type"</b>, соответсвующее типу сообщения.
 * По этому тегу сообщения делятся на 2 типа: команды - <b>"command"</b> и ответы - <b>"reply"</b>.
 *
 * Тип команды указывается в обязательном для команд поле <b>"command_type"</b>.
 *
 * Тип команды ответа в обязательном для ответов поле <b>"reply_type"</b>.
 * Также для ответа обязателен тег <b>"status"</b>, отображающий успешность выполнения операции.
 *
 *
 *
 * Ниже приведен список комманд и возможных ответов для серверов.
 *
 * - **CCPC7_Server**
 *  * <b>Инициализация</b>.
 *
 *    Комманда вызывается в начале работы с CCPC, или при необходимости
 *    перезагрузить систему. Эта команда создает класс общения с камак и прогоняет циклы Z и С.
 *
 *    Команда:
 *
 *         {
 *          "command_type" : "init",
 *          "type" : "command"
 *         }
 *
 *    Ответ:
 *
 *         {
 *          "type" : "reply",
 *          "reply_type" : "init",
 *          "reseted" : "1",
 *          "status" : "ok"
 *         }
 *
 *    Здесь:
 *    - "reseted" - Флаг перезагрузки сервера. 0 - если сервер проинициализирован в первый раз,
 *      1 - в противном случае.
 *
 *    Если на неинициализированный сервер будет послана команда, то сервер выдаст ошибку:
 *
 *         {
 *           "type" : "reply",
 *           "reply_type" : "error",
 *           "stage" : "check init",
 *           "description" : "CCPC hasn't set yet"
 *         }
 *
 *  * <b>Набор точки</b>
 *
 *    Команда:
 *
 *         {
 *             "acquisition_time" : "5",
 *             "command_type" : "acquire_point",
 *             "type" : "command",
 *             "external_meta": {
 *                "HV1_value": "-1",
 *                "HV2_value": "-1",
 *                "acquisition_time": "5",
 *                "point_index": "0"
 *              }
 *         }
 *
 *    Здесь:
 *    - "acquisition_time" - Время набора в секундах.
 *    - "external_meta" - Контейнер для внешних метаданных. Предназначен для сохранения информации о точке,
 *      полученной извне. Поле будет полностью скопировано в такой же тег в ответе.
 *
 *    Ответ:
 *
 *         {
 *             "binary_size": "2345",
 *             "end_time": "15:56:27.109",
 *             "external_meta": {
 *                 "HV1_value": "-1",
 *                 "HV2_value": "-1",
 *                 "acquisition_time": "5",
 *                 "point_index": "0"
 *             },
 *             "format_description": "https://drive.google.com/open?id=1xh_SF1k2F0leS-8apDR37x7-4b-YrQMlXkL4PMH-YxM",
 *             "programm_revision": "1.59aa102",
 *             "reply_type": "aquired_point",
 *             "start_time": "15:56:22.065",
 *             "status": "ok",
 *             "time_coeff": 50,
 *             "total_events": "335",
 *             "type": "reply"
 *         }
 *
 *    Здесь:
 *    - "binary_size" - Размер полученных бинарных данных в байтах.
 *    - "start_time" - Приблизительное время начала набора точки.
 *    - "end_time" - Приблизительное время окончания набора точки.
 *    - "time_coeff" - Коэффициент преобразования из внутреннего времени в наносекунды.
 *    - "total_events" - Количество сосчитанных событий в точке.
 *    - "external_meta" - Контейнер для внешних метаданных.
 *    - "format_description" - Описание формата бинарных данных.
 *    - "programm_revision" - Версия программы, с помощью которой набрана точка.
 *
 *    Опциональные параметры
 *    - "breaked" - Флаг ручной остановки набора.
 *
 * - **HV_Server**
 *
 *  В дополнение к общим обязательным полям, в сообщении HV_Server присутствует поле
 *  <b>"block"</b>, в котором содержится информация о блоке, к которому оно адресовано.
 *
 *  Обозначения блоков:
 *
 *  - "1" - Основной блок.
 *  - "2" - Блок смещения.
 *
 *  Ниже приведен список команд и ответов на них:
 *
 *
 *  * <b>Выставить напряжение</b>
 *
 *    Команда:
 *
 *         {
 *           "block": "1",
 *           "command_type" : "set_voltage",
 *           "type" : "command",
 *           "voltage": "16.1818"
 *         }
 *
 *    Здесь:
 *    - "voltage" - Требуемое напряжение на блоке в вольтах.
 *
 *    Ответ:
 *
 *         {
 *           "type": "answer",
 *           "block" : "1",
 *           "answer_type" : "set_voltage",
 *           "status": "ok"
 *         }
 *
 *  * Во время выполнения операций сервер занят. Если в это время послать ему команду, от ответит сообщением (Устаревшая команда. В настоящее время такой пакет не должен испускаться
 *    При нормальной работе сервера).
 *
 *         {
 *           "type": "reply",
 *           "reply_type": "error",
 *           "error_code": "8",
 *           "block" : "1",
 *           "stage": "check busy",
 *           "description": "1 busy"
 *         }
 *
 *   * <b>Выставить напряжение с последующей проверкой</b>
 *
 *   Команда:
 *
 *         {
 *           "block": "1",
 *           "command_type" : "set_voltage_and_check",
 *           "type" : "command",
 *           "voltage": "16.1818",
 *           "max_error": 5,
 *           "timeout" : 20
 *         }
 *
 *   Подробнее о команде и вариантах ответов см в HVControler::setVoltageAndCheck и HVControler::voltageSetAndCheckDone соответственно.
 * \note Инструкция создавалась с помощью  <br>
 * http://askubuntu.com/questions/279421/how-can-i-install-qt-5-x-on-12-04-lts  <br>
 * http://askubuntu.com/questions/407854/ubuntu-12-04-lts-installing-qt-4-8-5-and-qt-creator  <br>
 * http://askubuntu.com/questions/558318/installing-git-on-ubuntu-12-10
 */


#include <QApplication>
#include <QDir>
#include <QDateTime>
#include <datavisualizerform.h>
#include "camacclientform.h"
#include <QTextCodec>
#include <easylogging++.h>

#include <common.h>

// настройки логгера
#ifdef EL_CPP11
    INITIALIZE_EASYLOGGINGPP
#else
    _INITIALIZE_EASYLOGGINGPP
#endif

int main(int argc, char *argv[])
{
    setCodecs();
    initLogging(argc, argv);
    logModes();

    LOG(INFO) << "Programm started";

    QApplication a(argc, argv);

    qApp->setStyleSheet(getStyleSheet());

    CamacClientForm cF;
    cF.showMaximized();

    return a.exec();
}
