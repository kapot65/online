/*! \mainpage Программный комплекс Online
 *
 * \section introduction Введение
 * Программный комплекс Online предназначен для набора данных на установке Троицк ню масс. Комплекс написан на Qt 5.4 (4.8 для CCPC7_Server)
 * с использованием сторонних библиотек QJson, QCustomPlot и easylogging++. Комплекс состоит из 4 программ:
 * CCPC7_Server - программа для взаимодействия с CCPC. Устанавливается на CCPC. Программа осуществляет возможность управления CCPC
 * через сеть и реализует функции, необходимые для сбора, такие как:
 * - Инициализация CCPC.
 * - Сбор точки.
 * - Остановка сбора точки.
 * - Выполнение команды NAF (в работе не используется, необходимо для тестирования).
 * - Внутреннее управление CCPC происходит через API, поставляемое с машиной.
 *
 * HV_Server - программа для управления высоким напряжением. Ставится на компьютер, контролирующий высокое напряжение. Так же как и
 * CCPC7_Server программа осуществляет возможность управления высоким напряжением через сеть. Программа позволяет:
 * - Устанавливать напряжение на блоке.
 * - Считывать напряжение с блока.
 * - Внутреннее управление высоким напряжением осуществляется через общение с блоком через Com порты.
 *
 * CamacClient - Основная программа, через нее проводится управление сбором. Программа подключается к CCPC7_Server и HV_Server
 * и с помощью них проводит управление набором. CamacClient общается с CCPC7_Server и HV_Server по средствам TCP в формате
 * http://elog.mass.inr.ru/online/1. Программа позволяет:
 * - Установить сценарий сбора.
 * - Провести одно или несколько повторений сбора по сценарию со сменой или без смены направления прохода.
 * - Провести предварительную визуализацию собираемых данных.
 * - Выводить текущую информацию о сборе.
 * - Контролировать процесс сбора (ставить на паузу, останавливать сбор. Делать текущее повторение последним).
 *
 * DataVisualizer. Необязательная программа. Позволяет визуализировать уже набранные данные сценарии.
 *
 * \todo Дополнить титульный лист.
 * \todo Поменять название CamacClient.
 * \todo Поменять название CamacServer.
 * \todo Добавить описание алгоритма сбора точки.
 * \todo Online разобраться с потоками хендлеров.
 * \todo CamacServer добавить возможность сборки без QJson (метаданные в QVaraiantMap).
 *
 * \section install Установка
 *
 * \subsection CCPC7Install Установка ССPC7_Server
 * Программа предназначена для установки на Ubuntu 12. Т.к. CCPC API работает напрямую с ячейками
 * памяти, выполнение программы требует root прав. Также программа использует стороннюю библиотеку
 * QJson, которая должна быть зарегистрирована в системе. Для этого необходимо скопировать файл
 * библиотеки в путь
 *
 *     /usr/local/lib/
 *
 * Для запуска при автозагрузке необходимо снять проверку прав
 * с программы при ее запуске. Для этого в В
 *
 *     /etc/sudoers/
 *
 * (с помощью команды sudo visudo) нужно добавить строки:
 *
 *     user ALL=(ALL) NOPASSWD: path_to_ccpc7_server
 *
 * где
 *     path_to_ccpc7_server
 * - путь до программы CCPC7_Server.
 *
 * Скрипт для запуска из автозагрузки:
 *
 *     #!/bin/sh -e
 *     cd "path_to_ccpc7_server_folder"
 *     xterm -e  "sudo -n ‘path_to_CCPC7_Server”
 *
 * где
 *
 *     path_to_ccpc7_server_folder
 *
 * путь до папки с программой CCPC7_Server,
 *
 *     path_to_ccpc7
 *
 * путь до программы CCPC7_Server.
 *
 * Скрипт добаляется в автозагрузку с помощью Settings manager
 * (Applications menu -> Settings -> Settings Manager -> Session and Startup).
 * Также существуют другие методы добавления скрипта в автозагрузку, однако из - за
 * [бага](https://bugs.launchpad.net/ubuntu/+source/sysvinit/+bug/882254), существующего
 * на ubuntu 12, данный способ является наиболее простым в установке.
 * Для удобства, можно установить на CCPC удаленный рабочий стол x11VNC с помощью команды
 *
 *     sudo apt-get install x11vnc.
 *
 * Скрипт для автозагрузки:
 *
 *     #!/bin/sh -e
 *     while true
 *     do
 *     xterm -e x11vnc -forever
 *     done
 *
 * Скрипт представляет из себя бесконечный цикл, открывающий консоль с командой x11vnc,
 * которая поднимает сервер. Параметр -forever предотвращает закрытие порта при потере соединения.
 * Таким образом с помощью скрипта обеспеспечивается защита от случаного отсоединения
 * или закрытия консоли с портом. Недостатком того подхода является сложность отключения порта.
 * Если было создано лишнее подключение, его придется отключать через task manager.
 *
 * \subsection HVInstall Установка HV_Server
 * Для установки HV_Server не требуется каких-либо особых действий.
 * Достаточно скопировать папку с программой в любое место и установить в файле HVServerSettings.ini
 * установить правильные адреса Com портов, управляющих вольтметрами и делителями.
 * Также, для записи логов нужно создать папку c адресом G:/Logs.
 *
 * \subsection ClientInstall Установка CamacClient
 * Для установки программы CamacClient, достаточно скопировать папку с программой на компьютер.
 * Также, для записи логов нужно создать папку c адресом D:/Logs.
 *
 * \section userManual Руководство пользователя
 * \subsection prepairing Подготовка комплекса к работе
 * До начала сбора необходимо запустить сервера на ccpc7 и стойке HV.
 * Сервера запускаются автоматически при запуске компьютера. Также сервера можно запустить вручную
 * через иконку на рабочем столе.
 *
 * Получить доступ к рабочему столу можно:
 *
 * - **CCPC** - Через Vnc viewer (находится на панели задач). Адрес машины: 192.168.111.21:5900.
 * - **HV** - Через TeamViewer (находится на панели задач). Идентификатор машины 307265329.
 *
 * \image html remoteDesktops.png "Расположение иконок Vnc viewer и TeamViewer"
 *
 *
 * \subsection prepareClient CamacClient
 * На рисунке ниже показан интерфейс программы CamacClient.
 * ![Интерфейс CamacClient](/img/img.jpg)
 * Интерфейс состоит из интерфейса управления (левая часть) и интерфейса вывода (правая часть).
 * Интерфейс управления имеет 3 вкладки:
 * 1. Общее. Эта вкладка отвечает за набор данных по сценарию.
 * 2. CCPC7. Позволяет выполнять отдельно функции CCPC.
 * 3. High voltage. Позволяет выполнять отдельно функции высоковольтной стойки.
 * Вкладки CCPC7 и High voltage доступны только в режиме
 *
 *     advanced_mode
 *
 * Для того, чтобы включить его нужно поменять в файле настроек CamacClientSettings.ini
 * поле
 *
 *     advanced_mode
 *
 * с
 *
 *     false
 *
 * на
 *
 *     true.
 *
 *
 *
 * \section srcPrepare Подготовка проекта к сборке
 *
 * \subsection DEFINES Определения
 * Проект имеет несколько зарезервированных определений, для изменения функциональности.
 *
 * Ниже приведен список зарезервированных определений.
 * - TEST_MODE - Сборка программы в тестовом режиме. В таком режиме, программа будет выдавать больше отладочной информации.
 * В CamacClient будут отображаться метаданные входящих сообщений. В консолях серверов будет больше информации о текущем
 * состоянии сервера. Также в лог будет выведено оповещение о работе программы в тестовом режиме.
 *
 * - VIRTUAL_MODE - Сборка в виртуальном режиме. Нужна для тестирования программы без железа. В этом режиме сервера, вместо
 * подключения к портам, будут имитировать их. В лог будет выведено оповещение о работе программы в виртуальном режиме.
 * \warning В CamacClient не дописана реакция на это определение.
 *
 * - USE_QTJSON - Использовать встроенный парсер Json вместо QJson. Облегчает сборку проекта, т.к. убирает зависимость от
 * библиотеки QJson.
 * \note Работает только в версии Qt выше 5.
 *
 * Определения устанавливаются в .pro файле соотвестсвующего проекта.
 * Пример установки определения.
 *
 *      DEFINES += TEST_MODE
 *
 *
 */


#include <QApplication>
#include <QDir>
#include <QDateTime>
#include <datavisualizerform.h>
#include "camacclientform.h"

// настройки логгера
INITIALIZE_EASYLOGGINGPP
#define LOG_DIRECTORY "D:\\Logs\\CamacClient\\"

int main(int argc, char *argv[])
{
#ifdef TEST_MODE
    LOG(INFO) << "Programm run in test mode";
#endif

#ifdef VIRTUAL_MODE
    LOG(INFO) << "Programm run in virtual mode";
#endif

    START_EASYLOGGINGPP(argc, argv);

    QDateTime curr_datetime = QDateTime::currentDateTime();

    el::Loggers::reconfigureAllLoggers(el::ConfigurationType::Filename,
                                         (LOG_DIRECTORY +
                                          curr_datetime.toString("yyyyMMdd-hhmmss.zzz")).toStdString());
    LOG(INFO) << "Programm started";

    QApplication a(argc, argv);
    /*
    MainWindow w;
    w.show();
    /*/

    CamacClientForm cF;
    cF.showMaximized();
    //SeverTester st;
    //st.show();
    //AlgoritmForm af;
    //af.show();
    //*/

    
    return a.exec();
}
